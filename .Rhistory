"Bonnell, Miss. Elizabeth",
np.NaN
],
"Age": [22, 35, 58,np.NaN],
"Sex": ["male", "male", "female", np.NaN],
}
)
data
# alternative from list of tuples
names = [
("M. Rossi", 22, "male"),
("Mme Bianchi", 21, "female")
]
pd.DataFrame(names, columns=("Name", "Age", "Gender"))
# from numpy arrays
names = ["M. Rossi","Mme Bianchi"]
age = [22,21]
sex = ["male","female"]
pd.DataFrame(np.array([names,age,sex]).T, columns=("Names","Age","Gender"))
# get info about data variables
data.info()
data.head()
data.shape
data.describe()
data.columns
data.index
# NaNs in the whole database
# function isnull
data.isnull()
# Check NaNs among columns
# sum among all columns
data.isnull().sum()
# using indexing on condition
#data[data.notnull()]
# dropping null
# by default is axis = 0 (rows) hence drop any rows that has an NaN
# argument how = {any, all}
data.dropna(axis=0, how="all")
data.dropna(axis=1, how="all")
# fill NaN with values
data.fillna(0)
# count number of nas in each row
for i in range(len(data.index)) :
print(" Total NaN in row", i + 1, ":",
data.iloc[i].isnull().sum())
pass
series = pd.Series([0.25, 0.5, 0.75, 1.0],
index=['a', 'b', 'c', 'd'])
dataframe = pd.DataFrame({
"Name": [
"Braund, Mr. Owen Harris",
"Allen, Mr. William Henry",
"Bonnell, Miss. Elizabeth",
np.NaN
],
"Age": [22, 35, 58,np.NaN],
"Sex": ["male", "male", "female", np.NaN],
}, index= ['a','b','c','d'])
# series
series[1]
series['a']
series[series>0.5]
# Dataframes subsetting columns by their name
data["Name"]
data.Name
# specific rows
data[data["Age"] <30]
data = pd.Series(['a', 'b', 'c'], index=[1, 3, 5])
data
# explicit index when indexing
data[1]
# implicit index when slicing
data[1:3]
series.loc['a']
series.iloc[0]
dataframe.loc['a']
dataframe.iloc[0]
dataframe.iloc[:,[0,2]]
dataframe.loc[:, ["Name","Sex"]]
# define a function for convenience in following examples
def make_df(cols, ind):
"""Quickly make a DataFrame"""
data = {c: [str(c) + str(i) for i in ind]
for c in cols}
return pd.DataFrame(data, ind)
# row concat (default)
df1 = make_df('AB', [1, 2])
df2 = make_df('AB', [3, 4])
df1
df2
pd.concat([df1, df2])
# col concat
df3 = make_df('AB', [0, 1])
df4 = make_df('CD', [0, 1])
df3
df4
pd.concat([df3, df4], axis=1) # axis = 1 columns, axis = 0 rows
x = make_df('AB', [0, 1])
y = make_df('AB', [2, 3])
x
y
y.index = x.index  # make duplicate indices!
print(pd.concat([x, y]))
df=pd.concat([x, y])
df
# Subsetting a df with multiple indexes
df[1] # Key error
reticulate::repl_python()
df.iloc[1]
df.loc[1]
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the average change in wages after the introduction of the law
df_tab3row.T
show.plot()
reticulate::repl_python()
plt.show()()
reticulate::repl_python()
plt.show()
df_diff_diff = df.groupby("state").mean().T.loc[["y_ft_employment_before","y_ft_employment_after"]]
df_diff_diff.plot()
plt.show()
plt.show()
plt.show()
plt.show()
plt.hist(w_before_nj, x_bins, alpha=0.5, label='NJ', density=True)
reticulate::repl_python()
w_before_nj = df.loc[df["d_nj"]==1, ["x_st_wage_after"]]
w_before_pa = df.loc[df["d_nj"]==0, ["x_st_wage_after"]]
x_bins = np.arange(4.20,5.60,0.1)
plt.hist(w_before_nj, x_bins, alpha=0.5, label='NJ', density=True)
plt.hist(w_before_pa, x_bins, alpha=0.5, label='PA', density=True)
plt.show()
plt.hist(w_before_pa, x_bins, alpha=0.5, label='PA', density=True)
plt.show()
df_tab3row.T
df_tab3row
df_tab3row.loc[1, "diff_mean"]
reticulate::repl_python()
df_tab3row.loc[0, "diff_mean"]
reticulate::repl_python()
df_tab3row
df_tab3row
df_tab3row.loc[0, "diff_mean"]
reticulate::repl_python()
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the difference of differences : average change in wages after the introduction of the law
df_tab3row.loc[0, "diff_mean"]
reticulate::repl_python()
df_tab3row.loc["NJ", "diff_mean"]
reticulate::repl_python()
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the difference of differences : average change in wages after the introduction of the law
df_tab3row.loc["NJ", "diff_mean"]
reticulate::repl_python()
df_tab3row.loc[:, "diff_mean"]
reticulate::repl_python()
df_tab3row
df_tab3row
df_tab3row
df_tab3row.loc[:, "diff_ymean"]
df_tab3row.loc["NJ", "diff_ymean"]
df_tab3row.loc["NJ", "diff_ymean"] - df_tab3row["PA", "diff_ymean"]
reticulate::repl_python()
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the difference of differences : average change in wages after the introduction of the law
df_tab3row.loc["NJ", "diff_ymean"] - df_tab3row["PA", "diff_ymean"]
reticulate::repl_python()
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the difference of differences : average change in wages after the introduction of the law
df_tab3row.loc["NJ", "diff_ymean"] - df_tab3row["PA", "diff_ymean"]
reticulate::repl_python()
# # Exercises Lecture 3
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3rd row
## one way
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row.T
# ## 3. Compute the difference of differences : average change in wages after the introduction of the law
df_tab3row.loc["NJ", "diff_ymean"] - df_tab3row.loc["PA", "diff_ymean"]
df_tab3row
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
# Generating random data
np.random.seed(42) # Setting the seed for reproducibility
x = np.random.normal(50, 10, 100) # Generating 100 random numbers from a normal distribution with mean 50 and standard deviation 10
y = x + np.random.normal(0, 5, 100) # Generating 100 random numbers from a normal distribution with mean 0 and standard deviation 5 and adding them to x
# Calculating the correlation coefficient and the p-value
r, p = stats.pearsonr(x, y) # Using the Pearson's correlation test
print(f'The correlation coefficient is {r:.2f} and the p-value is {p:.4f}')
np.random.seed(52) # Setting the seed for reproducibility
x = np.random.normal(50, 10, 100) # Generating 100 random numbers from a normal distribution with mean 50 and standard deviation 10
y = x + np.random.normal(0, 5, 100) # Generating 100 random numbers from a normal distribution with mean 0 and standard deviation 5 and adding them to x
# Calculating the correlation coefficient and the p-value
r, p = stats.pearsonr(x, y) # Using the Pearson's correlation test
print(f'The correlation coefficient is {r:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The correlation is statistically significant.')
else:
print('The correlation is not statistically significant.')
if r > 0: # Checking the sign of the correlation coefficient
print('The correlation is not statistically significant.')
if r > 0: # Checking the sign of the correlation coefficient
print('The correlation is positive.')
elif r < 0:
print('The correlation is negative.')
else:
print('The correlation is zero.')
# Performing a hypothesis test to compare the means of x and y
t, p = stats.ttest_ind(x, y) # Using the independent t-test
t, p = stats.ttest_ind(x, y) # Using the independent t-test
print(f'The t-statistic is {t:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The means of x and y are significantly different.')
else:
print('The means of x and y are not significantly different.')
