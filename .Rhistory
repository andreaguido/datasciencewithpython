yE = np.where(YR<=yearE)
third = np.intersect1d(yI,yE)
third
def stats_year_david(yearI, yearE, team):
def stats_year_david(yearI, yearE, team):
yI = np.where(YR>=yearI)
yE = np.where(YR<=yearE)
third = np.intersect1d(yI,yE)
#dt=team[yI[0][0]:yE[0][0]+1]
stats(team[third])
def stats_year_david(yearI, yearE, team):
yI = np.where(YR>=yearI)
yE = np.where(YR<=yearE)
third = np.intersect1d(yI,yE)
#dt=team[yI[0][0]:yE[0][0]+1]
stats(team[third])
stats_year_david(2000,2010,NY)
stats_year(2000,2010,NY)
reticulate::repl_python()
import os
import numpy as np
os.getcwd()
os.chdir()
data = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data.shape
# Hints before you go:
# save columns that you need to use (numpy has no idea of what a dataframe is)
NY = data[:,1]
BO = data[:,2]
CS = data[:,3]
YR= data[:,0]
def moving_avg(a,n):
ret = np.zeros(len(a)-2*n)
for i in 1:10 :
print('suca')
#  ret[i]=a[i:i+n]+a[i+n:i+2*n]
pass
def moving_avg(a,n):
for i in 1:10 :
def moving_avg(a,n):
for i in 1:10 :
def moving_avg(a,n):
ret = np.zeros(len(a)-2*n)
pass
def moving_avg(a,n):
ret = np.zeros(len(a)-2*n)
for i in 1:10 :
def moving_avg(a,n):
ret = np.nancumsum(a, dtype = float, axis = 0)
ret[n:]= ret[2*n+1]/(2*n+1)
pass
suca=np.arange(1,5)
suca
moving_avg(suca,2)
arr = [1, 2, 3, 7, 9]
window_size = 3
i = 0
# Initialize an empty list to store moving averages
moving_averages = []
# Loop through the array t o
#consider every window of size 3
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(np.sum(arr[
i:i+window_size]) / window_size, 2)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
def moving_average(array,window_size):
i = 0
# Initialize an empty list to store moving averages
moving_averages = []
# Loop through the array t o
#consider every window of size 3
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(np.sum(arr[
i:i+window_size]) / window_size, 2)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(arr,3)
moving_average(arr,3)
moving_average(BO,3)
def moving_average(arr,window_size):
i = 0
# Initialize an empty list to store moving averages
moving_averages = []
# Loop through the array t o
#consider every window of size 3
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(np.sum(arr[
i:i+window_size]) / window_size, 2)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(BO,3)
moving_average(array,3)
moving_average(arr,3)
data = np.zeros(4, dtype = {'names':('name','age')})
name = ['Alice','Bob','Cathy','Doug']
age = [25,33,22,53]
data = np.zeros(4, dtype = {'names':('name','age')})
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4','f8')})
data
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')})
data
data['name']=name
data['age']=age
data
name = ['Alice','Bob','Cathy','Doug']
age = [25,33,22,53]
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')})
data['name']=name
data['age']=age
data
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')})
data
data = np.zeros(2, dtype = {'names':('name','age'), 'formats':('U10','i4')})
data
data['name']=name
data = np.zeros(2, dtype = {'names':('name','age'), 'formats':('U10','i4')})
data['name']=name
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')}) # 4 is the lenght of name and age arrays
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')}) # 4 is the lenght of name and age arrays
data['name']=name
data['age']=age
data
data['names']
data['name']
data['age']<30
data['name'][data['age']<30]
data = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data
dataraw = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
dataraw
data = np.dtype({'names':('year','NY','BO','CS'),'formats':('i4','i10','i10','i10')})
data = np.dtype({'names':('year','NY','BO','CS'),'formats':('i4','i8','i8','i8')})
data
data[year]=dataraw[:,1]
data['year']=dataraw[:,1]
dataraw[:,1]
data['year']=dataraw[:,0]
len(dataraw)
data = np.zeros(len(dataraw), dtype={'names':('year','NY','BO','CS'),'formats':('i4','i8','i8','i8')})
dataraw = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data = np.zeros(len(dataraw), dtype={'names':('year','NY','BO','CS'),'formats':('i4','i8','i8','i8')})
data
data['year']=dataraw[:,0]
data
data['NY']=dataraw[:,1]
data
data['BO']=dataraw[:,2]
data
data
def moving_average(YearI,YearE,n):
YI=np.where(YR==YearI)[0][0]
YE=np.where(YR==YearE)[0][0]+1
select_years_NY=data[YI:YE:,1]
select_years_BO=data[YI:YE:,2]
select_years_CS=data[YI:YE:,3]
ret_NY=np.cumsum(select_years_NY,dtype=float)
ret_BO=np.cumsum(select_years_BO,dtype=float)
ret_CS=np.cumsum(select_years_CS,dtype=float)
select_NY=ret_NY[n:]-ret_NY[:-n]
select_BO=ret_BO[n:]-ret_BO[:-n]
select_CS=ret_CS[n:]-ret_CS[:-n]
mv_avg_NY=select_NY[n-1:]/n
mv_avg_BO=select_BO[n-1:]/n
mv_avg_CS=select_CS[n-1:]/n
#print(np.around(mv_avg_NY),0)
# print(np.around(mv_avg_BO),0)
print(ret_CS)
print(select_CS)
print(mv_avg_CS)
print(np.around(mv_avg_CS),0)
return()
moving_average(1990,2000,3)
def moving_average(YearI,YearE,n):
YI=np.where(YR==YearI)[0][0]
YE=np.where(YR==YearE)[0][0]+1
select_years_NY=data[YI:YE:,1]
select_years_BO=data[YI:YE:,2]
select_years_CS=data[YI:YE:,3]
ret_NY=np.cumsum(select_years_NY,dtype=float)
ret_BO=np.cumsum(select_years_BO,dtype=float)
ret_CS=np.cumsum(select_years_CS,dtype=float)
print(ret_CS)
select_NY=ret_NY[n:]-ret_NY[:-n]
select_BO=ret_BO[n:]-ret_BO[:-n]
select_CS=ret_CS[n:]-ret_CS[:-n]
print(select_CS)
mv_avg_NY=select_NY[n-1:]/n
mv_avg_BO=select_BO[n-1:]/n
mv_avg_CS=select_CS[n-1:]/n
#print(np.around(mv_avg_NY),0)
# print(np.around(mv_avg_BO),0)
print(mv_avg_CS)
print(np.around(mv_avg_CS),0)
return()
moving_average(1908,2021,4)
YI=np.where(YR==1990)[0][0]
YE=np.where(YR==2000)[0][0]+1
print(YI)
def moving_average(YearI,YearE,n):
YI=np.where(YR==YearI)[0][0]
YE=np.where(YR==YearE)[0][0]+1
select_years_NY=data[YI:YE:,1]
select_years_BO=data[YI:YE:,2]
select_years_CS=data[YI:YE:,3]
ret_NY=np.cumsum(select_years_NY,dtype=float)
ret_BO=np.cumsum(select_years_BO,dtype=float)
ret_CS=np.cumsum(select_years_CS,dtype=float)
print(ret_CS)
select_NY=ret_NY[n:]-ret_NY[:-n]
select_BO=ret_BO[n:]-ret_BO[:-n]
select_CS=ret_CS[n:]-ret_CS[:-n]
print(select_CS)
mv_avg_NY=select_NY[n-1:]/n
mv_avg_BO=select_BO[n-1:]/n
mv_avg_CS=select_CS[n-1:]/n
print(np.around(mv_avg_NY),0)
print(np.around(mv_avg_BO),0)
print(mv_avg_CS)
print(np.around(mv_avg_CS),0)
return()
moving_average(1908,2021,4)
select_years_NY=data[YI:YE:,1]
select_years_NY=data[YI:YE,1]
select_years_NY=data[YI:YE,1]
print(data[82:85,1])
print(data)
import os
import numpy as np
os.getcwd()
os.chdir("C://Users/aguido/Documents/GitHub/datasciencewithpython/")
data = np.genfromtxt(fname="2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data.shape
# Hints before you go:
# save columns that you need to use (numpy has no idea of what a dataframe is)
NY = data[:,1]
BO = data[:,2]
CS = data[:,3]
YR= data[:,0]
print(data)
data = np.genfromtxt(fname="2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data = np.genfromtxt(fname="Datasets/2021_Baseball_Teams.csv",delimiter=";", skip_header = 1)
data.shape
# Hints before you go:
# save columns that you need to use (numpy has no idea of what a dataframe is)
NY = data[:,1]
BO = data[:,2]
CS = data[:,3]
YR= data[:,0]
moving_average(1908,2021,4)
def moving_average(YearI,YearE,n):
YI=np.where(YR==YearI)[0][0]
YE=np.where(YR==YearE)[0][0]+1
select_years_NY=data[YI:YE:,1]
select_years_BO=data[YI:YE:,2]
select_years_CS=data[YI:YE:,3]
ret_NY=np.cumsum(select_years_NY,dtype=float)
ret_BO=np.cumsum(select_years_BO,dtype=float)
ret_CS=np.cumsum(select_years_CS,dtype=float)
select_NY=ret_NY[n:]-ret_NY[:-n]
select_BO=ret_BO[n:]-ret_BO[:-n]
select_CS=ret_CS[n:]-ret_CS[:-n]
mv_avg_NY=select_NY[n-1:]/n
mv_avg_BO=select_BO[n-1:]/n
mv_avg_CS=select_CS[n-1:]/n
print(np.around(mv_avg_NY),0)
print(np.around(mv_avg_BO),0)
print(np.around(mv_avg_CS),0)
return()
moving_average(1908,2021,4)
moving_average(2015,2021,4)
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(np.sum(arr[
i:i+window_size]) / window_size, 2)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
def stats(col):
print('Mean is: ', round(np.nanmean(col),1))
print('Median is: ', round(np.nanmedian(col),1))
print('Standard dev is: ', round(np.nanstd(col),1))
pass
stats(NY)
def stats_aggregated(data):
print("Team        NY      |   BO     |   CS   ")
print('Mean       ', round(np.nanmean(data[:1]),1), " | ", round(np.nanmean(data[:2]),1) ," | ",round(np.nanmean(data[:3]),1))
print('Med.       ', round(np.nanmedian(data[:1]),1), " | ", round(np.nanmedian(data[:2]),1) ," | ",round(np.nanmedian(data[:3]),1))
print('Std.       ', round(np.nanstd(data[:1]),1), " | ", round(np.nanstd(data[:2]),1) ," | ",round(np.nanstd(data[:3]),1))
pass
stats_aggregated(data)
def stats_aggregated(data):
print("Team        NY      |   BO     |   CS   ")
print('Mean       ', round(np.nanmean(data[:,1]),1), " | ", round(np.nanmean(data[,:2]),1) ," | ",round(np.nanmean(data[:,3]),1))
print('Med.       ', round(np.nanmedian(data[:1]),1), " | ", round(np.nanmedian(data[:2]),1) ," | ",round(np.nanmedian(data[:3]),1))
print('Std.       ', round(np.nanstd(data[:1]),1), " | ", round(np.nanstd(data[:2]),1) ," | ",round(np.nanstd(data[:3]),1))
pass
stats_aggregated(data)
def stats_aggregated(data):
print("Team        NY      |   BO     |   CS   ")
print('Mean       ', round(np.nanmean(data[:,1]),1), " | ", round(np.nanmean(data[,:2]),1) ," | ",round(np.nanmean(data[:,3]),1))
print('Med.       ', round(np.nanmedian(data[:1]),1), " | ", round(np.nanmedian(data[:2]),1) ," | ",round(np.nanmedian(data[:3]),1))
print('Std.       ', round(np.nanstd(data[:1]),1), " | ", round(np.nanstd(data[:2]),1) ," | ",round(np.nanstd(data[:3]),1))
pass
def stats_aggregated(data):
print("Team        NY      |   BO     |   CS   ")
print('Mean       ', round(np.nanmean(data[:,1]),1), " | ", round(np.nanmean(data[:,2]),1) ," | ",round(np.nanmean(data[:,3]),1))
print('Med.       ', round(np.nanmedian(data[:1]),1), " | ", round(np.nanmedian(data[:2]),1) ," | ",round(np.nanmedian(data[:3]),1))
print('Std.       ', round(np.nanstd(data[:1]),1), " | ", round(np.nanstd(data[:2]),1) ," | ",round(np.nanstd(data[:3]),1))
pass
stats_aggregated(data)
stats(NY)
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(np.sum(arr[
i:i+window_size]) / window_size, 2)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(
np.sum(arr[i:i+2*window_size]) / (2*window_size+1), 2
)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - window_size + 1:
# Calculate the average of current window
window_average = round(
np.sum(arr[i:i+2*window_size]) / (2*window_size+1), 2
)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(BO, 2)
moving_average(NY, 2)
len(moving_average(NY, 2))
x=moving_average(NY, 2)
x.shape
moving_average(NY, 2)
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - 2*window_size + 1:
# Calculate the average of current window
window_average = round(
np.sum(arr[i:i+2*window_size]) / (2*window_size+1), 2
)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(NY, 2)
moving_average(CO, 2)
moving_average(CS, 2)
data
moving_average(CS, 5)
moving_average(CS, 2)
t = np.arange(1,10)
t
moving_average(t, 2)
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - 2*window_size + 1:
# Calculate the average of current window
window_average = round(
np.sum(arr[i:i+2*window_size+1]) / (2*window_size+1), 2
)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(t, 2)
t
def moving_average(arr,window_size):
i = 0
moving_averages = []
while i < len(arr) - 2*window_size:
# Calculate the average of current window
window_average = round(
np.sum(arr[i:i+2*window_size+1]) / (2*window_size+1), 2
)
# Store the average of current
# window in moving average list
moving_averages.append(window_average)
# Shift window to right by one position
i += 1
print(moving_averages)
pass
moving_average(t, 2)
t
moving_average(CS, 2)
moving_average(NY, 2)
M=np.ones((3,3))
M
a = np.arange(0,3)
a
M/10
M+a
a
M
M+a
a
t(a)
a.t
a.t()
a=np.array([1,2,3],[3,4,5])
a=np.array([1,2,3,3,4,5])
a
a+M
np.random.seed(1234)
X = np.random.random([10,3])
X
mean = X.mean(0) # mean by column
mean
X = np.random.random([10,3])
mean = X.mean(0) # mean by column
X
mean = X.mean(1) # mean by column
mean
mean = X.mean(0) # mean by column
mean
X
mean
X
x_centered.mean(0)
x_centered = X - mean
x_centered.mean(0)
rand = np.random.RandomState(42) # to seed
X= rand.randint(0,10,(4,6))
X
np.sort(X,axis=0)
X
np.sort(X,axis=0)
X= rand.randint(0,10,(4,6))
X
rand = np.random.RandomState(42) # to seed
X= rand.randint(0,10,(4,6))
X
np.sort(X,axis=0)
np.sort(X,axis=1)
X
np.sort(X,axis=1)
X
np.sort(X,axis=0)
X
X = rand.randint(0,10, [10,6])
X
np.partition(X,3) # all smallest values are on the left side of each array
name = ['Alice','Bob','Cathy','Doug']
age = [25,33,22,53]
data = np.zeros(4, dtype = {'names':('name','age'), 'formats':('U10','i4')}) # 4 is the lenght of name and age arrays
data
data['name']=name
data
data['age']=age
data['age']=age
data
data['name']
data
