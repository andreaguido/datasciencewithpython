#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
df_tab3row = df_tab3.T
df_tab3row == df_tab3.T
df_tab3row == df_tab3.T
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
## one way
df_tab3row == df_tab3.T
df_tab3row = df_tab3.T
df_tab3row
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df_tab3row
df_tab3b = df.loc[:,["state","diff_y"]].groupby("state").mean().T
reticulate::repl_python()
df_tab3b = df_tab3.loc[:,["state","diff_y"]].groupby("state").mean().T
reticulate::repl_python()
df_tab3
df["diff_y"] = df["y_ft_employment_before"] - df["y_ft_employment_after"]
df_tab3b = df.loc[:,["state","diff_y"]].groupby("state").mean().T
df_tab3b
df_tab3b
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
## one way
df_tab3row = df_tab3.T
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
import copy
df_tab3row = copy.copy(df_tab3.T)
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
## one way
import copy
df_tab3row = copy.copy(df_tab3.T)
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# cleaning memory
for v in dir(): del globals()[v]
pass
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
## one way
import copy
df_tab3row = copy.copy(df_tab3.T)
reticulate::repl_python()
df_tab3row = copy(df_tab3.T)
reticulate::repl_python()
#!/usr/bin/env python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
df_tab3row = copy(df_tab3.T)
reticulate::repl_python()
import copy
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
import copy
df_tab3row = copy(df_tab3.T)
reticulate::repl_python()
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
## one way
import copy
df_tab3row = copy.copy(df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
#!/usr/bin/env python
# coding: utf-8
# # Exercises Lecture 3
# # Card and Krueger (1994) available <a href="https://davidcard.berkeley.edu/papers/njmin-aer.pdf">here</a>
#
# The data data-difference-in-differences.csv is based on the original data provided by Card and Krueger (1994). The original data public.dat and can be downloaded at the MHE Data Archive.
#
# Variables have been renamed to decrease cognitive load. Rows are 410 fast-food restaurants in New Jersey and eastern Pennsylvania, interviewed in February/March 1992 and November/December 1992 (see Card and Krueger 1994, Tab. 1, p. 774).
# cleaning memory
for v in dir(): del globals()[v]
pass
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("Datasets/data-difference-in-differences.csv", header=0)
df.head()
# Read me:
#
# Below variables that are in the example dataset.
#
# - y_ft_employment_before: Full time equivalent employment before treatment [Outcome]
# - y_ft_employment_after: Full time equivalent employment after treatment [Outcome]
# - d_nj: 1 if New Jersey; 0 if Pennsylvania (treatment variable) [Treatment]
# - x_co_owned: If owned by company = 1
# - x_southern_nj: If in southern NJ = 1
# - x_central_nj: If if in central NJ = 1
# - x_northeast_philadelphia: If in Pennsylvania, northeast suburbs of Philadelphia = 1
# - x_easton_philadelphia: If in Pennsylvania, Easton = 1
# - x_st_wage_before: Starting wage (dollar/hr) before treatment
# - x_st_wage_after: Starting wage (dollar/hr) after treatment
# - x_burgerking: If Burgerking = 1
# - x_kfc: If KFC = 1
# - x_roys: If Roys = 1
# - x_wendys: If Wendys = 1
# - x_closed_permanently: Closed permanently after treatment
# # Data cleaning
# ## 1. Add a string variable indicating whehther NJ or PA
df["state"] = np.where(df["d_nj"]==1 ,"NJ","PA")
df.head()
# # Statistics
#
# Consider table 3, the first three columns (stores by state)
# ## 1. Reproduce figures in Table 3, 1st and 2nd rows, first two columns Stores by state
# Employment by state, before and after
df_tab3= df.loc[:,["state","y_ft_employment_before","y_ft_employment_after"]].groupby("state").mean().T
df_tab3
# ## 2. Compute 3. row
## one way
import copy
df_tab3row = (df_tab3.T)
df_tab3row["diff_ymean"]= df_tab3row["y_ft_employment_after"]-df_tab3row["y_ft_employment_before"]
df_tab3row["diff_ymean"]
df["diff_y"] = df["y_ft_employment_before"] - df["y_ft_employment_after"]
df_tab3b = df.loc[:,["state","diff_y"]].groupby("state").mean().T
df_tab3b
df_main= df.loc[:,["x_st_wage_before","x_st_wage_after","y_ft_employment_before","y_ft_employment_after"]]
df_main.hist()
w_before_nj = df.loc[df["d_nj"]==1, ["x_st_wage_before"]]
w_before_pa = df.loc[df["d_nj"]==0, ["x_st_wage_before"]]
x_bins = np.arange(4.20,5.60,0.1)
plt.hist(w_before_nj, x_bins, alpha=0.5, label='NJ', density=True)
plt.hist(w_before_pa, x_bins, alpha=0.5, label='PA', density=True)
w_before_nj = df.loc[df["d_nj"]==1, ["x_st_wage_after"]]
w_before_pa = df.loc[df["d_nj"]==0, ["x_st_wage_after"]]
x_bins = np.arange(4.20,5.60,0.1)
plt.hist(w_before_nj, x_bins, alpha=0.5, label='NJ', density=True)
plt.hist(w_before_pa, x_bins, alpha=0.5, label='PA', density=True)
df_diff_diff = df.groupby("state").mean().T.loc[["y_ft_employment_before","y_ft_employment_after"]]
df_diff_diff.plot()
df_diff_diff
# Importing libraries
import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
# Generating random data
np.random.seed(42) # Setting the seed for reproducibility
x = np.random.normal(50, 10, 100) # Generating 100 random numbers from a normal distribution with mean 50 and standard deviation 10
y = x + np.random.normal(0, 5, 100) # Generating 100 random numbers from a normal distribution with mean 0 and standard deviation 5 and adding them to x
# Calculating the correlation coefficient and the p-value
r, p = stats.pearsonr(x, y) # Using the Pearson's correlation test
print(f'The correlation coefficient is {r:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The correlation is statistically significant.')
else:
print('The correlation is not statistically significant.')
if r > 0: # Checking the sign of the correlation coefficient
print('The correlation is positive.')
elif r < 0:
print('The correlation is negative.')
else:
print('The correlation is zero.')
# Performing a hypothesis test to compare the means of x and y
t, p = stats.ttest_ind(x, y) # Using the independent t-test
print(f'The t-statistic is {t:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The means of x and y are significantly different.')
else:
print('The means of x and y are not significantly different.')
# cleaning memory
for v in dir(): del globals()[v]
pass
# Importing libraries
import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
# Generating random data
np.random.seed(42) # Setting the seed for reproducibility
x = np.random.normal(50, 10, 100) # Generating 100 random numbers from a normal distribution with mean 50 and standard deviation 10
y = x + np.random.normal(0, 5, 100) # Generating 100 random numbers from a normal distribution with mean 0 and standard deviation 5 and adding them to x
# Calculating the correlation coefficient and the p-value
r, p = stats.pearsonr(x, y) # Using the Pearson's correlation test
print(f'The correlation coefficient is {r:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The correlation is statistically significant.')
else:
print('The correlation is not statistically significant.')
if r > 0: # Checking the sign of the correlation coefficient
print('The correlation is positive.')
elif r < 0:
print('The correlation is negative.')
else:
print('The correlation is zero.')
# Performing a hypothesis test to compare the means of x and y
t, p = stats.ttest_ind(x, y) # Using the independent t-test
print(f'The t-statistic is {t:.2f} and the p-value is {p:.4f}')
# Interpreting the results
if p < 0.05: # Setting the significance level to 0.05
print('The means of x and y are significantly different.')
else:
print('The means of x and y are not significantly different.')
